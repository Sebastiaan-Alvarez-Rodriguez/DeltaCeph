/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the scala Plugin to add support for Scala.
    id 'scala'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

//////////// Jarfile Generation Section ////////////
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar


repositories {
//        WARNING: Order is important! Top is searched first!
//        Use The 3 lines below if you compiled arrow dependencies somewhere else, and want to compile against those now.
//        Of course, you will have to provide an *absolute path* to where you have stored these jars on your filesystem.
    flatDir {
        dirs '/home/radon/uni/mrp/reps/DeltaCeph/depjars', '/home/radon/uni/mrp/precompiled/write_arrow-5.0.0-SNAPSHOT/11'
    }
    mavenLocal()
    mavenCentral()
}

configurations {
    shipEssential
    shipLight.extendsFrom(shipEssential)
    shipFull.extendsFrom(shipLight)

    implementation.extendsFrom(shipFull)
}

dependencies {
    // Use Scala 2.12 in our library project
    shipFull 'org.scala-lang:scala-library:2.12.10'
    shipFull 'org.scala-lang:scala-reflect:2.12.10'

//      Repository libs for modified v5.0.0 bridge Arrow Dataset JNI
    shipEssential ('org.apache.arrow:arrow-dataset:5.0.0-SNAPSHOT') {
        transitive = false
    }
    shipEssential ('org.apache.arrow:arrow-memory-core:5.0.0-SNAPSHOT') {
        transitive = false
    }
    shipEssential ('org.apache.arrow:arrow-memory-netty:5.0.0-SNAPSHOT') {
        transitive = false
    }
    shipEssential ('org.apache.arrow:arrow-vector:5.0.0-SNAPSHOT') {
        transitive = false
    }

    // Custom Arrow Dataset API
//    shipEssential name: 'arrow-dataset-5.0.0-SNAPSHOT'


    // Delta Lake dependency
//    shipFull group: 'io.delta', name: 'delta-core_2.12', version: '0.8.0'
    // Custom Delta Lake
    shipEssential name: 'delta-core_2.12-1.1.0-SNAPSHOT'

    // Dependencies needed for Spark
    shipFull ('org.apache.spark:spark-core_2.12:3.1.2') {
        exclude group: 'com.fasterxml.jackson.core' // Spark pom is incorrectly targetting jackson core 2.11, causing internal version mismatches. We add it ourselves later.
    }
    shipFull ('org.apache.spark:spark-sql_2.12:3.1.2') {
        exclude group: 'com.fasterxml.jackson.core' // Spark pom is incorrectly targetting jackson core 2.11, causing internal version mismatches. We add it ourselves later.
    }

    shipFull ('com.fasterxml.jackson.core:jackson-annotations') {
        version {strictly '2.10.0'}
    }
    shipFull ('com.fasterxml.jackson.core:jackson-core') {
        version {strictly '2.10.0'}
    }
    shipFull ('com.fasterxml.jackson.core:jackson-databind') {
        version {strictly '2.10.0'}
    }
    shipFull ('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml') {
        version {strictly '2.10.0'}
    }
    // Spark uses this more modern jar for some reason. It should not be included in the library, as it enforces too-new versions of several jackson libraries, causing conflicts.
//        shipFull ('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.2') {
//            transitive = false
//        }
    shipFull 'org.codehaus.jackson:jackson-jaxrs:1.9.13'
    shipFull 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    shipFull 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.10.0'
    shipFull 'com.fasterxml.jackson.module:jackson-module-paranamer:2.10.0'
    shipFull 'com.fasterxml.jackson.module:jackson-module-scala_2.12:2.10.0'
    shipFull 'org.codehaus.jackson:jackson-xc:1.9.13'


    // Spark indirect dependencies
    shipFull 'org.apache.avro:avro:1.8.2'
    shipFull 'org.apache.hadoop:hadoop-common:2.7.4'

    //Even though Spark provides this, we always crash using their version. Better to include it ourselves
    shipEssential 'com.thoughtworks.paranamer:paranamer:2.8'


    //        Compiled libs in local repository.
    shipEssential name: 'arrow-spark-connector-4.0'
}

application {
    // Define the main class for the application.
    mainClass = 'DeltaCeph.Main'
}





/** Builds a full jar JAR, with all dependencies contained */
shadowJar {
    mainClassName = 'DeltaCeph.Main'
    zip64(true)

    mergeServiceFiles()
    configurations = [ project.configurations.shipFull ]
}
/** Builds a lightweight type JAR. You are responsible to provide all dependencies listed in the manifest `Class-Path` entry */
task lightJar(type: ShadowJar) {
    mainClassName = 'DeltaCeph.Main'
    zip64(true)

    mergeServiceFiles()

    dependencies {// We have to explicitly exclude Scala lang libraries that the scala plugin tries to push
        exclude(dependency('org.scala-lang:scala-library:2.12.10'))
        exclude(dependency('org.scala-lang:scala-reflect:2.12.10'))
    }

    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'DeltaCeph.Main',
                'Class-Path': 'scala-library-2.12.10.jar scala-reflect-2.12.10.jar scala-xml_2.12-1.2.0.jar delta-core_2.12.jar spark-core_2.12-3.1.2.jar spark-sql_2.12-3.1.2.jar avro-1.8.2.jar hadoop-common-2.7.4.jar log4j-1.2.17.jar'
        )
    }
    archiveClassifier.set('light')
    from sourceSets.main.output
    from sourceSets.test.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [ project.configurations.shipLight ]
    manifest.inheritFrom project.tasks.jar.manifest
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

/** Builds an essentials-only type JAR. You are responsible to provide all dependencies listed in the manifest `Class-Path` entry */
task essentialJar(type: ShadowJar) {
    mainClassName = 'DeltaCeph.Main'
    zip64(true)

    mergeServiceFiles()

    dependencies {
        exclude(dependency('org.scala-lang:scala-library:2.12.10'))
        exclude(dependency('org.scala-lang:scala-reflect:2.12.10'))
    }

    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'Main-Class': 'DeltaCeph.Main',
                'Class-Path': 'scala-library-2.12.10.jar scala-reflect-2.12.10.jar scala-xml_2.12-1.2.0.jar delta-core_2.12.jar spark-core_2.12-3.1.2.jar spark-sql_2.12-3.1.2.jar avro-1.8.2.jar hadoop-common-2.7.4.jar log4j-1.2.17.jar parquet-avro-1.8.2.jar log4j-api-scala_2.12-12.0.jar log4j-api-2.12.0.jar log4j-core-2.12.0.jar'
        )
    }
    archiveClassifier.set('essential')
    from sourceSets.main.output
    from sourceSets.test.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    configurations = [ project.configurations.shipEssential ]
    manifest.inheritFrom project.tasks.jar.manifest
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

jar {
    mainClassName = 'DeltaCeph.Main'
}